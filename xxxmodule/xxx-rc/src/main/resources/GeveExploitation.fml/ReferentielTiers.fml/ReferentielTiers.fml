use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.technologyadapter.jdbc.HbnModelSlot;

/**
 * Encode le referentiel d'un tiers
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://geve.guyotenvironnement.com/GeveExploitation.viewpoint/ReferentielTiers.fml")
public class ReferentielTiers {

  @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)  
  public FlexoConceptInstanceType<Tiers> tiers;
  @GetSetProperty(value="referentielsFlux", access=get)  
  public List<FlexoConceptInstanceType<ReferentielFlux>> getReferentielsFlux {  
    return this.SelectFlexoConceptInstance(type=ReferentielFlux);  
  }
  @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)  
  public GINAFIBComponent ui;

  @CreationScheme  
  ReferentielTiers:create(FlexoConceptInstanceType<Tiers> tiers) {  
    tiers = parameters.tiers;    
    for (typeDeFlux : donneesReferentiel.typesDeFlux) {    
      ReferentielFlux.create(typeDeFlux)    
    }    
    ui = ui.ConfigureGINAFIBComponent();  
  }  

  @ActionScheme  
  FlexoConceptInstanceType<ReferentielFlux> getReferentielFlux(FlexoConceptInstanceType<TypeDeFlux> typeDeFlux) {  
    List<FlexoConceptInstanceType<ReferentielFlux>> list = this.SelectFlexoConceptInstance(type=ReferentielFlux,where=where=(selected.typeDeFlux = parameters.typeDeFlux));    
    if (list.size > 0) {    
      return list.get(0);    
    } else {    
      return null;    
    }  
  }  

  @ActionScheme  
  FlexoConceptInstanceType<ReferentielMatiere> getReferentielMatiere(FlexoConceptInstanceType<TypeDeFlux> typeDeFlux, FlexoConceptInstanceType<Matiere> matiere) {  
    FlexoConceptInstanceType<ReferentielFlux> referentielFlux = this.getReferentielFlux(parameters.typeDeFlux);    
    return referentielFlux.getReferentielMatiere(parameters.matiere);  
  }  


  @FlexoConcept  
  public class ReferentielFlux {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<TypeDeFlux> typeDeFlux;  
    @GetSetProperty(value="referentielsMatiere", access=get)    
    public List<FlexoConceptInstanceType<ReferentielMatiere>> getReferentielsMatiere {    
      return container.SelectFlexoConceptInstance(type=ReferentielMatiere);    
    }  
    @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)    
    public GINAFIBComponent ui;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public Double baseTonnageAnnuel;  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<Caracterisation> caracterisation;  
    @GetSetProperty(value="totalPourcentage", access=get)    
    public Double getTotalPourcentage {    
      Double total = 0.0;      
      for (referentielMatiere : referentielsMatiere) {      
        total = (total + referentielMatiere.pourcentage);      
      }      
      return total;    
    }  
  
    @CreationScheme    
    ReferentielFlux:create(FlexoConceptInstanceType<TypeDeFlux> aTypeDeFlux) {    
      typeDeFlux = parameters.aTypeDeFlux;      
      baseTonnageAnnuel = 0.0;      
      log "Open new transaction"      
      db.OpenTransaction()      
      caracterisation = Caracterisation.create(tiers,typeDeFlux,donneesReferentiel);      
      log "Commit transaction"      
      db.CommitTransaction()      
      for (matiere : donneesReferentiel.matieres) {      
        ReferentielMatiere.create(matiere)      
      }      
      ui = ui.ConfigureGINAFIBComponent();    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    FlexoConceptInstanceType<ReferentielMatiere> getReferentielMatiere(FlexoConceptInstanceType<Matiere> matiere) {    
      List<FlexoConceptInstanceType<ReferentielMatiere>> list = container.SelectFlexoConceptInstance(type=ReferentielMatiere,where=where=(selected.matiere = parameters.matiere));      
      if (list.size > 0) {      
        return list.get(0);      
      } else {      
        return null;      
      }    
    }    
  
  
    @FlexoConcept    
    public class ReferentielMatiere {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<Matiere> matiere;    
      @GetSetProperty(value="pourcentage", access=get)      
      public Double getPourcentage {      
        return (caracterisationMatiere.valeur * 100);      
      }      
      @GetSetProperty(value="pourcentage", access=set)      
      public void setPourcentage(Double value) {      
        log ("set pourcentage to : " + value)        
        db.OpenTransaction()        
        caracterisationMatiere.valeur = (value / 100);        
        db.CommitTransaction()        
        container.firePropertyChange totalPourcentage      
      }    
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<Caracterisation_matiere> caracterisationMatiere;    
      
      @CreationScheme      
      ReferentielMatiere:create(FlexoConceptInstanceType<Matiere> matiere) {      
        matiere = parameters.matiere;        
        caracterisationMatiere = caracterisation.getCaracterisationMatiere(matiere.dbProduit);      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class ReferentielMatiere {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Matiere> matiere;  
    @GetSetProperty(value="pourcentage", access=get)    
    public Double getPourcentage {    
      return (caracterisationMatiere.valeur * 100);    
    }    
    @GetSetProperty(value="pourcentage", access=set)    
    public void setPourcentage(Double value) {    
      log ("set pourcentage to : " + value)      
      db.OpenTransaction()      
      caracterisationMatiere.valeur = (value / 100);      
      db.CommitTransaction()      
      container.firePropertyChange totalPourcentage    
    }  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Caracterisation_matiere> caracterisationMatiere;  
  
    @CreationScheme    
    ReferentielMatiere:create(FlexoConceptInstanceType<Matiere> matiere) {    
      matiere = parameters.matiere;      
      caracterisationMatiere = caracterisation.getCaracterisationMatiere(matiere.dbProduit);    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
