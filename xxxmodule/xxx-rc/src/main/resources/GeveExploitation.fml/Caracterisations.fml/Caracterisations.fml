use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;
use org.openflexo.technologyadapter.jdbc.HbnModelSlot;

/**
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://geve.guyotenvironnement.com/GeveExploitation.viewpoint/Caracterisations.fml")
public class Caracterisations {

  @GetSetProperty(value="caracterisations", access=get)  
  public List<FlexoConceptInstanceType<Caracterisation>> getCaracterisations {  
    return this.SelectFlexoConceptInstance(type=Caracterisation);  
  }
  @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)  
  public GINAFIBComponent ui;

  @CreationScheme  
  Caracterisations:create() {  
    ui = ui.ConfigureGINAFIBComponent();  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  

  @ActionScheme  
  Void nouvelleCaracterisation(FlexoConceptInstanceType<Tiers> unTiers, FlexoConceptInstanceType<TypeDeFlux> unTypeDeFlux, Float unTonnage, Date uneDate, String unOperateur, String uneDescription) {  
    log "Nouvelle caracterisation"    
    Caracterisation.create(parameters.unTiers,parameters.unTypeDeFlux,parameters.unTonnage,parameters,parameters.unOperateur,parameters.uneDescription)  
  }  


  /**  
   * Caractérisation relative à un tiers et à un type de flux donné  
   *   
   */  
  @FlexoConcept  
  public class Caracterisation {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Tiers> tiers;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<TypeDeFlux> typeDeFlux;  
    @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)    
    public GINAFIBComponent caracterisationUI;  
    @GetSetProperty(value="caracterisationsMatieres", access=get)    
    public List<FlexoConceptInstanceType<CaracterisationMatiere>> getCaracterisationsMatieres {    
      return container.SelectFlexoConceptInstance(type=CaracterisationMatiere);    
    }  
    @FMLRTVirtualModelInstanceModelSlot(cardinality=ZeroOne,readOnly=false)    
    public VirtualModelInstanceType<ReferentielTiers> referentielTiers;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Caracterisation> caracterisation;  
    @GetSetProperty(value="tonnageTotal", access=get)    
    public Double getTonnageTotal {    
      Double total = 0.0;      
      for (caracterisationMatiere : caracterisationsMatieres) {      
        total = (total + caracterisationMatiere.tonnageMatiere);      
      }      
      return total;    
    }  
  
    @CreationScheme    
    Caracterisation:create(FlexoConceptInstanceType<Tiers> unTiers, FlexoConceptInstanceType<TypeDeFlux> unTypeDeFlux, Double unTonnage, String uneDate, String unOperateur, String uneDescription) {    
      tiers = parameters.unTiers;      
      typeDeFlux = parameters.unTypeDeFlux;      
      log "Open new transaction"      
      db.OpenTransaction()      
      caracterisation = Caracterisation.create(tiers,typeDeFlux,donneesReferentiel);      
      caracterisation.tonnage = parameters.unTonnage;      
      caracterisation.date = parameters.uneDate;      
      caracterisation.operator = parameters.unOperateur;      
      caracterisation.description = parameters.uneDescription;      
      log "Commit transaction"      
      db.CommitTransaction()      
      referentielTiers = container.container.getReferentiel(tiers);      
      for (matiere : donneesReferentiel.matieres) {      
        CaracterisationMatiere.create(matiere)      
      }      
      caracterisationUI = caracterisationUI.ConfigureGINAFIBComponent();    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @ActionScheme    
    FlexoConceptInstanceType<CaracterisationMatiere> getCaracterisationMatiere(FlexoConceptInstanceType<Matiere> matiere) {    
      List<FlexoConceptInstanceType<CaracterisationMatiere>> list = container.SelectFlexoConceptInstance(type=CaracterisationMatiere,where=where=(selected.matiere = parameters.matiere));      
      if (list.size > 0) {      
        return list.get(0);      
      } else {      
        return null;      
      }    
    }    
  
  
    @FlexoConcept    
    public class CaracterisationMatiere {    
      
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<Matiere> matiere;    
      @ExpressionProperty      
      public Double pourcentage = ((tonnageMatiere / caracterisation.tonnage) * 100);    
      @ExpressionProperty      
      public Double pourcentageReferentiel = referentielMatiere.pourcentage;    
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<ReferentielMatiere> referentielMatiere;    
      @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)      
      public FlexoConceptInstanceType<Caracterisation_matiere> caracterisationMatiere;    
      @GetSetProperty(value="tonnageMatiere", access=get)      
      public Float getTonnageMatiere {      
        return caracterisationMatiere.valeur;      
      }      
      @GetSetProperty(value="tonnageMatiere", access=set)      
      public void setTonnageMatiere(Float value) {      
        log ("set caracterisation value to " + value)        
        db.OpenTransaction()        
        caracterisationMatiere.valeur = value;        
        db.CommitTransaction()        
        this.firePropertyChange pourcentage        
        container.firePropertyChange tonnageTotal      
      }    
      
      @CreationScheme      
      CaracterisationMatiere:create(FlexoConceptInstanceType<Matiere> matiere) {      
        matiere = parameters.matiere;        
        caracterisationMatiere = caracterisation.getCaracterisationMatiere(matiere.dbProduit);        
        referentielMatiere = referentielTiers.getReferentielMatiere(typeDeFlux,matiere);        
        log ("referentielTiers=" + referentielTiers)        
        log ("referentielMatiere=" + referentielMatiere)      
      }      
      
      @DeletionScheme      
      Void delete() {      
          
      }      
      
    }    
  
  }  

  @FlexoConcept  
  public class CaracterisationMatiere {  
  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Matiere> matiere;  
    @ExpressionProperty    
    public Double pourcentage = ((tonnageMatiere / caracterisation.tonnage) * 100);  
    @ExpressionProperty    
    public Double pourcentageReferentiel = referentielMatiere.pourcentage;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<ReferentielMatiere> referentielMatiere;  
    @FlexoConceptInstanceRole(cardinality=ZeroOne,readOnly=false)    
    public FlexoConceptInstanceType<Caracterisation_matiere> caracterisationMatiere;  
    @GetSetProperty(value="tonnageMatiere", access=get)    
    public Float getTonnageMatiere {    
      return caracterisationMatiere.valeur;    
    }    
    @GetSetProperty(value="tonnageMatiere", access=set)    
    public void setTonnageMatiere(Float value) {    
      log ("set caracterisation value to " + value)      
      db.OpenTransaction()      
      caracterisationMatiere.valeur = value;      
      db.CommitTransaction()      
      this.firePropertyChange pourcentage      
      container.firePropertyChange tonnageTotal    
    }  
  
    @CreationScheme    
    CaracterisationMatiere:create(FlexoConceptInstanceType<Matiere> matiere) {    
      matiere = parameters.matiere;      
      caracterisationMatiere = caracterisation.getCaracterisationMatiere(matiere.dbProduit);      
      referentielMatiere = referentielTiers.getReferentielMatiere(typeDeFlux,matiere);      
      log ("referentielTiers=" + referentielTiers)      
      log ("referentielMatiere=" + referentielMatiere)    
    }    
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
  }  

}
