use org.openflexo.technologyadapter.gina.FIBComponentModelSlot;
use org.openflexo.foundation.fml.rt.FMLRTVirtualModelInstanceModelSlot;

/**
 * Encodage des données servant de références
 * 
 * @version 0.1
 */
@VirtualModel(uri="http://geve.guyotenvironnement.com/GeveExploitation.viewpoint/DonneesReferentiel.fml")
public class DonneesReferentiel {

  @FIBComponentModelSlot(cardinality=ZeroOne,readOnly=false)  
  public GINAFIBComponent ui;
  @GetSetProperty(value="typesDeFlux", access=get)  
  public List<FlexoConceptInstanceType<TypeDeFlux>> getTypesDeFlux {  
    return this.SelectFlexoConceptInstance(type=TypeDeFlux);  
  }
  @GetSetProperty(value="matieres", access=get)  
  public List<FlexoConceptInstanceType<Matiere>> getMatieres {  
    return this.SelectFlexoConceptInstance(type=Matiere);  
  }
  @GetSetProperty(value="tiers", access=get)  
  public List<FlexoConceptInstanceType<Tiers>> getTiers {  
    return this.SelectFlexoConceptInstance(type=Tiers);  
  }
  @FMLRTVirtualModelInstanceModelSlot(cardinality=ZeroOne,readOnly=false)  
  public VirtualModelInstanceType<TiersReferentielUI> tiersReferentielUI;
  @FMLRTVirtualModelInstanceModelSlot(cardinality=ZeroOne,readOnly=false)  
  public VirtualModelInstanceType<TypeDeFluxReferentielUI> typeDeFluxReferentielUI;
  @FMLRTVirtualModelInstanceModelSlot(cardinality=ZeroOne,readOnly=false)  
  public VirtualModelInstanceType<MatiereReferentielUI> matiereReferentielUI;

  @CreationScheme  
  DonneesReferentiel:create() {  
    ui = ui.ConfigureGINAFIBComponent();    
    tiersReferentielUI = TiersReferentielUI.init();    
    typeDeFluxReferentielUI = TypeDeFluxReferentielUI.init();    
    matiereReferentielUI = MatiereReferentielUI.init();  
  }  

  @ActionScheme  
  public FlexoConceptInstanceType<Tiers> identifyNewTiers(FlexoConceptInstanceType<Tiers> tiers) {  
    FlexoConceptInstanceType<Tiers> newTiers = Tiers.create(parameters.tiers);    
    this.firePropertyChange tiers    
    ReferentielTiers.create(newTiers)    
    container.firePropertyChange referentielsTiers    
    return newTiers;  
  }  

  @ActionScheme  
  public FlexoConceptInstanceType<TypeDeFlux> identifyNewTypeDeFlux(FlexoConceptInstanceType<Produit> produit) {  
    FlexoConceptInstanceType<TypeDeFlux> newTypeDeFlux = TypeDeFlux.create(parameters.produit);    
    this.firePropertyChange typesDeFlux    
    return newTypeDeFlux;  
  }  

  @ActionScheme  
  public FlexoConceptInstanceType<Matiere> identifyNewMatiere(FlexoConceptInstanceType<Produit> produit) {  
    FlexoConceptInstanceType<Matiere> newMatiere = Matiere.create(parameters.produit);    
    this.firePropertyChange matieres    
    return newMatiere;  
  }  

  @DeletionScheme  
  Void delete() {  
  
  }  


  @FlexoConcept  
  public class TypeDeFlux {  
  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<Produit> dbProduit;  
    @ExpressionProperty    
    public String nom = dbProduit.libelle;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String typeActivite;  
  
    @DeletionScheme    
    Void delete() {    
      dbProduit = null;    
    }    
  
    @CreationScheme    
    public TypeDeFlux:create(FlexoConceptInstanceType<Produit> aDBProduit) {    
      dbProduit = parameters.aDBProduit;    
    }    
  
  }  

  @FlexoConcept  
  public class Matiere {  
  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<Produit> dbProduit;  
    @ExpressionProperty    
    public String nom = dbProduit.libelle;  
    @PrimitiveRole(cardinality=ZeroOne,readOnly=false)    
    public String type;  
  
    @DeletionScheme    
    Void delete() {    
      dbProduit = null;    
    }    
  
    @CreationScheme    
    public Matiere:create(FlexoConceptInstanceType<Produit> aDBProduit) {    
      dbProduit = parameters.aDBProduit;    
    }    
  
  }  

  @FlexoConcept  
  public class Tiers {  
  
    @FlexoConceptInstanceRole(cardinality=One,readOnly=false)    
    public FlexoConceptInstanceType<Tiers> dbTiers;  
    @ExpressionProperty    
    public String nom = dbTiers.nom_recherche;  
  
    @DeletionScheme    
    Void delete() {    
      
    }    
  
    @CreationScheme    
    Tiers:create(FlexoConceptInstanceType<Tiers> aDBTiers) {    
      dbTiers = parameters.aDBTiers;    
    }    
  
  }  

}
